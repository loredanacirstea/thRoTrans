return(dif);
}
correctTerms <- function(terms, this, sources, lang){
ids <- as.character(terms[terms$source == this & terms$lang == lang, "term_id"]);
concept <- 0;
sino <- 0;
for(id in unique(ids)){
tms <- as.character(terms[terms$term_id == id & terms$source == this & terms$lang == lang, "term"]);
con <- 0;
for(tm in tms) {
interm <- 0;
for(so in sources){
if(tm %in% as.character(terms[terms$term_id == id & terms$source == so & terms$lang == lang, "term"])){
interm <- interm + 1;
}
}
if(interm != 0) { sino <- sino + 1; con <- con +1;}
}
if(con != 0) { concept <- concept + 1; }
}
return(matrix(c(c(length(unique(ids)), concept, concept/length(unique(ids))), c(length(ids), sino, sino/length(ids))), ncol=2));
}
correctWords <- function(terms, this, sources, lang){
ids <- as.character(terms[terms$source == this & terms$lang == lang, "term_id"]);
concept <- 0;
sino <- 0;
for(id in unique(ids)){
tms <- as.character(terms[terms$term_id == id & terms$source == this & terms$lang == lang, "term"]);
con <- 0;
for(tm in tms) {
interm <- 0;
for(so in sources){
if(tm %in% as.character(terms[terms$term_id == id & terms$source == so & terms$lang == lang, "term"])){
interm <- interm + 1;
}
}
if(interm != 0) { sino <- sino + 1; con <- con +1;}
}
if(con != 0) { concept <- concept + 1; }
}
return(matrix(c(c(length(unique(ids)), concept, concept/length(unique(ids))), c(length(ids), sino, sino/length(ids))), ncol=2));
}
correctTermsTable <- function(terms, this=c(), sources=c(), lang){
noConc <- c();
noCorrConc <- c();
ratioCC <- c();
noTerms <- c();
noCorrTerms <- c();
rationCT <- c();
for(th in this){
func <- correctTerms(terms, th, sources, lang);
noConc <- c(noConc, func[1,1]);
noCorrConc <- c(noCorrConc, func[2,1]);
ratioCC <- c(ratioCC, func[3,1]);
noTerms <- c(noTerms, func[1,2]);
noCorrTerms <- c(noCorrTerms, func[2,2]);
rationCT <- c(rationCT, func[3,2]);
}
df <- data.frame(noConc, noCorrConc, ratioCC, noTerms, noCorrTerms, rationCT);
row.names(df) <- this;
return(df);
}
correctWordsTable <- function(words, this=c(), sources=c(), lang){
noWords <- c();
noCorrWor <- c();
ratioCorr <- c();
for(th in this){
func <- correctWords(words, th, sources, lang);
noWords <- c(noWords, func[1,2]);
noCorrWor <- c(noCorrWor, func[2,2]);
ratioCorr <- c(ratioCorr, func[3,2]);
}
df <- data.frame(noWords, noCorrWor, ratioCorr);
row.names(df) <- this;
return(df);
}
ratioOffNewWords <- function(terms, offLang, newLang, sourc){
ids <- as.character(terms[terms$source == sourc & terms$lang == newLang, "term_id"]);
sameRatioWordsC <- 0;
sameRatioWordsT <- 0;
for(id in unique(ids)){
tms <- as.character(terms[terms$term_id == id & terms$source == sourc & terms$lang == newLang, "term"]);
interm <- 0;
for(tm in tms){
t <- 0;
so <- as.character(terms[terms$term_id == id & terms$lang == offLang, "term"]);
for(s in so) {
if(length(unlist(strsplit(tm, " "))) == length(unlist(strsplit(s, " ")))){
interm <- interm + 1;
}
}
if(interm != 0) { t <- t + 1; sameRatioWordsT <- sameRatioWordsT +1; }
}
if(t != 0) { sameRatioWordsC <- sameRatioWordsC +1; }
}
return(matrix(c(c(length(unique(ids)), sameRatioWordsC, sameRatioWordsC/length(unique(ids))), c(length(ids), sameRatioWordsT, sameRatioWordsT/length(ids))), ncol=2));
}
ratioOffNewWordsTable <- function(terms, offLang, newLang, sources){
noConc <- c();
noCorrConc <- c();
ratioCC <- c();
noTerms <- c();
noCorrTerms <- c();
rationCT <- c();
for(sourc in sources){
func <- ratioOffNewWords(terms, offLang, newLang, sourc);
noConc <- c(noConc, func[1,1]);
noCorrConc <- c(noCorrConc, func[2,1]);
ratioCC <- c(ratioCC, func[3,1]);
noTerms <- c(noTerms, func[1,2]);
noCorrTerms <- c(noCorrTerms, func[2,2]);
rationCT <- c(rationCT, func[3,2]);
}
df <- data.frame(noConc, noCorrConc, ratioCC, noTerms, noCorrTerms, rationCT);
row.names(df) <- sources;
return(df);
}
fromSourceNo <- function(terms, transl = "reference", sourc = "junqueira", lang = "ro"){
no <- 0;
for(id in as.character(terms[terms$source == transl & terms$lang == lang & terms$term != "","term_id"])){
if(as.character(terms[terms$source == transl & terms$term_id == id & terms$term != "", "term"]) %in% as.character(terms[terms$source == sourc & terms$term_id == id & terms$term != "", "term"])){
no <- no + 1;
}
}
return(no);
}
fromSourceTable <- function(terms, transl = "reference", sources = c("junqueira"), lang = "ro"){
no <- 0;
sourc <- c();
for(so in sources){ sourc[so] <- 0;}
for(id in as.character(terms[terms$source == transl & terms$lang == lang & terms$term != "","term_id"])){
for(so in sources){
if(as.character(terms[terms$source == transl & terms$term_id == id & terms$term != "", "term"]) %in% as.character(terms[terms$source == so & terms$term_id == id & terms$term != "", "term"])){
sourc[so] <- sourc[so] + 1;
}
}
}
return(sourc);
}
findInText <- function(text, terms, sources, langs){
find <- as.character(terms[terms$lang %in% langs & terms$source %in% sources, "term"]);
nwo <- list();
for(term in find){
nwords <- length(unlist(strsplit(term, " ")));
if(as.character(nwords) %in% names(nwo)){
nwo[[as.character(nwords)]] <- c(nwo[[as.character(nwords)]], term);
}
else{ nwo[[as.character(nwords)]] <- c(); nwo[[as.character(nwords)]] <- c(nwo[[as.character(nwords)]], term);}
}
ord <- as.integer(names(nwo));
ord <- order(ord, decreasing = TRUE);
for(or in ord){
for(term in nwo[[as.character(or)]]) {
#text <- sub(paste(" ",term, " ", sep=""), paste(" <", term, "> ", sep=""),text, ignore.case = TRUE);
#text <- sub(paste("[ ,.;?!\n()\\]",term, "[ ,.;?!\n()\\]", sep=""), paste(" <", term, "> ", sep=""),text, ignore.case = TRUE, fixed = FALSE);
text <- gsub(paste("\\b",term, "\\b", sep=""), paste("<", term, ">", sep=""),text, ignore.case = TRUE, fixed = FALSE);
}
}
return(text);
}
findInText2 <- function(text, terms, sources, langs){
if(length(sources) == 1){ find <- as.character(terms[terms$lang %in% langs & terms$source %in% sources, "term"]); }
else { find <- unique(as.character(terms[terms$lang %in% langs & terms$source %in% sources, "term"])); }
nwo <- list();
ind <- list();
ind["ind"] <- c();
ind["len"] <- c();
for(term in find){
nwords <- length(unlist(strsplit(term, " ")));
if(as.character(nwords) %in% names(nwo)){
nwo[[as.character(nwords)]] <- c(nwo[[as.character(nwords)]], term);
}
else{ nwo[[as.character(nwords)]] <- c(); nwo[[as.character(nwords)]] <- c(nwo[[as.character(nwords)]], term);}
}
ord <- as.integer(names(nwo));
ord <- sort.int(ord, decreasing = TRUE);
for(or in ord){
for(term in nwo[[as.character(or)]]) {
interm <- gregexpr(paste("\\b", term, "\\b", sep = "", collapse = ""), text, TRUE);
if(interm[[1]][1] != -1){
for(i in 1: length(interm[[1]])){
if(interm[[1]][i] %in% ind[["ind"]] == FALSE){
ind[["ind"]] <- c(ind[["ind"]], interm[[1]][i]);
ind[["len"]] <- c(ind[["len"]], attr(interm[[1]],"match.length")[i]);
}
}
}
}
}
if(length(ind[["ind"]]) != 0){
txt <- c();
tm <- c();
df <- data.frame(ind[["ind"]], ind[["len"]]);
df <- df[order(df[,1]),];
ini <- 1;
for(i in row.names(df)){
txt <- c(txt, substr(text, ini, df[i,1]-1));
tm <- c(tm, substr(text, df[i,1], df[i,1]+df[i,2]-1));
ini <- df[i,1]+df[i,2];
}
text2 <- c();
for(i in 1: length(txt)){
text2 <- c(text2, txt[i], c("<"), tm[i], c(">"));
}
if(df[length(row.names(df)),1] < nchar(text)){ text2 <- c(text2, substr(text, df[length(row.names(df)),1]+ df[length(row.names(df)),2], nchar(text))); }
text2 <- paste(text2, sep = "", collapse = "");
return(text2);
} else { return(text); }
}
createText <- function(terms, sources=c(), langs=c(), noChar=c(), noTerms){
text <- c();
ind <- list();
matches <- list();
for(no in 1:length(noChar)){
ind[[no]] <- which(nchar(as.character(terms[terms$source %in% sources & terms$lang %in% langs, "term"])) == noChar[no]);
matches[[no]] <- unique(terms[row.names(terms[terms$source %in% sources & terms$lang %in% langs, ])[ind[[no]]], "term"]);
if(length(matches[[no]]) < noTerms) {cat("Found only ", length(matches), " terms."); return();}
else{
txt <- paste(matches[[no]][1:noTerms], sep = " lorem ipsum ");
text <- paste(text, txt , sep = " lorem ipsum ");
}
}
return(paste(text, collapse = " "));
}
time <- function(text, terms, sources, langs, repeats, loops){
values <- c();
for(i in 1:loops){
val <- system.time( replicate(repeats, findInText2(text, terms, sources, langs)));
values <- c(values, val[[3]]);
}
return(values);
}
compareTime <- function(terms, sources = list(), langs = list(), noChar = c(), noTerms, repeats, loops){
times <- list();
for(so in 1:length(sources)){
times[[so]] <- c();
}
for(so in 1:length(sources)){
text <- createText(terms, sources[[so]], langs[[so]], noChar, noTerms);
cat(text);
times[[so]] <- time(text, terms, sources[[so]], langs[[so]], repeats, loops);
}
df <- data.frame(times);
return(df);
}
plotdf <- function(df, rep){
val <- c();
sources <- c();
noRep <- c();
for(col in names(df)){
val <- c(val, df[,col]);
sources <- c(sources, rep(col, length(row.names(df))));
noRep <- c(noRep, rep(rep, length(row.names(df))));
}
df2 <- data.frame(elapsed = val, sources = sources, noRepet = noRep);
return(df2);
}
comparedf <- function(df){
sources <- levels(df[,"sources"]);
min <- c(); fQ <- c(); med <- c(); mean <- c(); tQ <- c(); max <- c();
for(so in sources){
sum <- summary(df[df$sources == so, "elapsed"]);
min <- c(min, sum["Min."]);
fQ <- c(fQ, sum["1st Qu."]);
med <- c(med, sum["Median"]);
mean <- c(mean, sum["Mean"]);
tQ <- c(tQ, sum["3rd Qu."]);
max <- c(max, sum["Max."]);
}
df2 <- data.frame(sources, min, firstQu = fQ, median = med, mean, thirdQu = tQ, max);
return(df2);
}
translateText <- function(textFile, terms, sources, langs, lg, sourc){
if(length(sources) == 1){ find <- as.character(terms[terms$lang %in% langs & terms$source %in% sources, "term"]); }
else { find <- unique(as.character(terms[terms$lang %in% langs & terms$source %in% sources, "term"])); }
nwo <- list();
ind <- list();
ind["ind"] <- c();
ind["len"] <- c();
text <- readLines(textFile);
txt <- unlist(strsplit(text, " "));
ii <- c();
aterms <- list();
for(term in find){
nwords <- length(unlist(strsplit(term, " ")));
if(as.character(nwords) %in% names(nwo)){
nwo[[as.character(nwords)]] <- c(nwo[[as.character(nwords)]], term);
}
else{ nwo[[as.character(nwords)]] <- c(); nwo[[as.character(nwords)]] <- c(nwo[[as.character(nwords)]], term);}
}
ord <- as.integer(names(nwo));
ord <- ord[!ord==0];
ord <- sort.int(ord, decreasing = TRUE);
for(or in ord){
for(term in nwo[[as.character(or)]]){
wo <- unlist(strsplit(term, " "));
#ii <- agrep(wo[1], txt, max.distance = 0, ignore.case = TRUE);
ii <- grep(wo[1], txt, ignore.case = TRUE, value = TRUE, fixed = TRUE);
aterms[[term]] <- c();
if(length(wo) == 1) {
#cat(term, ": ", which((nchar(txt[ii])- nchar(wo[1]))<4), "\n");
if(length(grep(wo[1], txt, value = TRUE, fixed = TRUE, ignore.case = TRUE))!=0){
aterms[[term]] <- c(aterms[[term]], txt[ii][which((nchar(txt[ii])- nchar(wo[1]))<3)]); }
}
else if(length(ii) >0){
for(i in 2:length(wo)){
for(j in ii){
#cat(term, ": ", wo[i], ", ", txt[j+1], "\n");
if(length(txt[j+1])>0 && length(wo[i])>0)
if(is.na(wo[i]) == FALSE && is.na(txt[j+1]) == FALSE)
if(wo[i] != " " && txt[j+1] != " "){
if(length(grep(wo[i],txt[j+1], value = TRUE, fixed = TRUE, ignore.case = TRUE)) == 0) { ii <- ii[ii!=j]; }
}
else { ii <- ii[ii!=j]; }
else { ii <- ii[ii!=j]; }
}
}
if(length(ii) > 0){
aterms[[term]] <- c();
for(i in ii){
#cat(term, ": ",i, ", ", i+length(wo)-1, ", ", txt[i:(i+length(wo)-1)],  ", ", paste(txt[i:(i+length(wo)-1)], sep=" ",collapse=" "), ", ", aterms[[term]], "\n");
#cat(c(aterms[[term]], paste(txt[i:(i+length(wo)-1)], sep=" ",collapse=" ")), "\n");
aterms[[term]] <- c(aterms[[term]], paste(txt[i:(i+length(wo)-1)], sep=" ",collapse=" "));
#cat(aterms[[term]], "\n");
#cat(i, ": ", ii, "\n");
}
}
}
#cat(term, ": ", aterms[[term]], "\n");
}
}
#cat(aterms);
for(at in names(aterms[lapply(aterms,length)>0])){
if(is.na(at)==FALSE){
for(term in aterms[[at]]) {
interm <- gregexpr(paste("\\b", term, "\\b", sep = "", collapse = ""), text, TRUE);
if(interm[[1]][1] != -1){
for(i in 1: length(interm[[1]])){
if(interm[[1]][i] %in% ind[["ind"]] == FALSE){
ind[["ind"]] <- c(ind[["ind"]], interm[[1]][i]);
ind[["len"]] <- c(ind[["len"]], attr(interm[[1]],"match.length")[i]);
}
}
}
}
}
}
if(length(ind[["ind"]]) != 0){
txt <- c();
tm <- c();
df <- data.frame(ind[["ind"]], ind[["len"]]);
df <- df[order(df[,1]),];
ini <- 1;
for(i in row.names(df)){
txt <- c(txt, substr(text, ini, df[i,1]-1));
tm <- c(tm, substr(text, df[i,1], df[i,1]+df[i,2]-1));
ini <- df[i,1]+df[i,2];
}
text2 <- c();
for(i in 1: length(txt)){
text2 <- c(text2, txt[i], c("\n<"), tm[i], c(">\n"));
}
if(df[length(row.names(df)),1] < nchar(text)){ text2 <- c(text2, substr(text, df[length(row.names(df)),1]+ df[length(row.names(df)),2], nchar(text))); }
text2 <- paste(text2, sep = "", collapse = "");
#return(text2);
tt <- text2;
} else {
#return(text);
tt <- text;
cat("No changes in the document.");
return();
}
writeLines(unlist(strsplit(tt,"\n")), "../Data/translate.txt");
cat("Check text. Copy and paste the text into Google Translate or another tool,
then copy and paste the result into the same file. Make sure you have an \n after the last line,
but not more Press Enter when finished.");
kk <- readLines(n=1);
tt <- readLines("../Data/translate.txt");
#return(tt);
i <- 1;
for(line in 1:length(tt)){
if(length(grep("<",tt[line])) != 0 && length(grep(">",tt[line])) != 0){
id <- as.character(terms[terms$lang == langs & terms$term == gsub("[[:digit:]]", "", names(unlist(aterms))[match(tm[i],unlist(aterms))]), "term_id"])[1];
tt[line] <- as.character(terms[terms$term_id == id & terms$lang == lg & terms$source == sourc, "term"])[1];
i <- i +1;
}
}
#writeLines(tt, "../Data/translate.txt");
writeLines(paste(tt, sep = "", collapse = ""),  "../Data/translate.txt");
}
#global data frames: terms and relations
#cat("Connecting to database ...");
ontoinitialize <- function() {
x <- getURL("https://raw.githubusercontent.com/ctzurcanu/smp/master/data/term.csv");
allTerms <- read.csv(text = x);
y <- getURL("https://raw.githubusercontent.com/ctzurcanu/smp/master/data/term_relation.csv");
allRel <- read.csv(text = y);
tm <- allTerms;
rel <- allRel;
orig <- 10001;
displayLg <-"la";
finalTerms <- data.frame();
finalWords <- data.frame();
LaRoRel <- data.frame();
LaRoRelOk <- data.frame();
LaRoRelAuto <- data.frame();
LaRoRelAutoOk <- data.frame();
z <- getURL("https://raw.githubusercontent.com/loredanacirstea/thRoTrans/master/Data/500terms.csv");
sample500 <- read.csv(text = z);
}
# newTranslation(sample500);
# compareRatioWT2(finalLaEn2, final3, finalWords3, c("la","en"), "ro", c("autoOk", "autoRed", "reference","referenceWordsLa", "gtLaRoTerms", "gtEnRoTerms", "gtLaRoWords", "gtEnRoWords", "junqueira", "tm2009", "tm2004", "buc1987", "craiova2006"), c("autoOk", "autoRed", "reference", "reference", "gtLaRoWords", "gtEnRoWords", "gtLaRoWords", "gtEnRoWords", "junqueira", "tm2009", "tm2004", "buc1987", "craiova2006"));
#df<-compareRatioWT2(finalLaEn2, final3, finalWords3, c("la", "en"), "ro", c("autoOk", "autoRed", "reference", "referenceWordsLa", "gtLaRoTerms", "gtEnRoTerms", "gtLaRoWords", "gtEnRoWords"), c("autoOk", "autoRed", "reference", "reference", "gtLaRoWords", "gtEnRoWords", "gtLaRoWords", "gtEnRoWords"));
#gRatioT <- compareRatioWTgraph(df[,1:2], "Numărul total de termeni și numărul de termeni unici \ncorespunzătoare surselor folosite", "Numărul de termeni", leg = c("număr total de termeni", "număr de termeni unici"),lim=650, set=c(-0.25, -0.1));
#gRatioW <- compareRatioWTgraph(df[,3:4], "Numărul total de cuvinte și numărul de cuvinte unice \ncorespunzătoare surselor folosite", "Numărul de cuvinte", leg = c("număr total de cuvinte", "număr de cuvinte unice"),lim=1150, set=c(-0.2, -0.1));
#gRatioWT <- compareRatioWTgraphS(df[5], "Raportul dintre numărul total de cuvinte și numărul total de termeni, \ncorespunzător surselor folosite", "Valoarea raportului",lim=2);
# compareSynoT(finalLaEn2, final3, c("la","en"), "ro", c("autoOk", "autoRed", "reference","referenceWordsLa", "gtLaRoTerms", "gtEnRoTerms", "gtLaRoWords", "gtEnRoWords", "junqueira", "tm2009", "tm2004", "buc1987", "craiova2006"));
#dfSyn <- compareSynoT(finalLaEn2, final3, c("la","en"), "ro", c("autoOk", "autoRed", "reference","referenceWordsLa", "gtLaRoTerms", "gtEnRoTerms", "gtLaRoWords", "gtEnRoWords"));
#gRatioSynT <- compareRatioWTgraphS(dfSyn[4], "Raportul dintre numărul de sinonime și numărul de termeni, \ncorespunzător surselor folosite", "Valoarea raportului",lim=2);
#RatioSynC <- compareRatioWTgraphS(dfSyn[3], "Numărul de concepte care prezintă sinonime, \ncorespunzător surselor folosite", "Numărul de concepte",lim=80);
#dfCorr <- correctTermsTable(final3, c("autoOk", "autoRed", "reference", "referenceWordsLa", "gtLaRoTerms", "gtEnRoTerms", "gtLaRoWords", "gtEnRoWords"), c("junqueira", "tm2009", "tm2004", "buc1987", "craiova2006"), "ro");
#dfCorrW <- correctWordsTable(finalWords3, c("autoOk", "autoRed", "reference", "gtLaRoWords", "gtEnRoWords"), c("junqueira", "tm2009", "tm2004", "buc1987", "craiova2006"), "ro");
#gRatioCorrT <- compareRatioWTgraph(dfCorr[,c(3,6)], "Raportul dintre numărul de concepte/termeni corecți \nși numărul total de concepte/termeni", "Valoarea raportului", leg = c("raport concepte corecte/totale", "raport termeni corecți/totali"), lim=1.5,set=c(-0.25, 0));
#gRatioCorrW <- compareRatioWTgraphS(dfCorrW[3], "Raportul dintre numărul de cuvinte corecte \nși numărul total de cuvinte", "Valoarea raportului", lim=1.5);
# syn <- synoW(LaRoRelOk);
# synA <- synoW(LaRoRelAutoOk); # 580 unique terms
# length(names(syn));   #530 unique terms with transl != 0 (582 uniq la terms)
# noUniqueWords<-noElemList(syn, byElem = TRUE);   #vector of frequency
# noUniqueWordsAuto<-noElemList(synA, byElem = TRUE);
# max(noUniqueWords)     #20 = cellula
# max(noUniqueWordsAuto) #20 = cellula
# syn[which(noUniqueWords >10)]
# synA[which(noUniqueWordsAuto >10)] # same translation for the words
# woDif <- synDif(syn)   #40 words with diff synon
# woDifA <- synDif(synA) #27
# syn[woDif]            #the diff words
# LaRoRelOk2 <- autoTranslRef(LaRoRelOk2) # sino reduced
# length(which(final[final$source == "gtLaRoTerms", "term"] %in% final[final$source == "reference", "term"])) # 55
# length(which(final[final$source == "gtLaRoTerms", "term"] %in% c(final[final$source == "reference", "term"], final[final$source == "junqueira", "term"], final[final$source == "tm2009", "term"], final[final$source == "tm2004", "term"], final[final$source == "buc1987", "term"], final[final$source == "craiova2006", "term"] ))) #65
#dfRatioWords <- ratioOffNewWordsTable(final3, "la", "ro", c("autoOk", "autoRed", "reference", "referenceWordsLa", "gtLaRoTerms", "gtEnRoTerms", "gtLaRoWords", "gtEnRoWords"));
#gRatioTerms <- compareRatioWTgraph(dfRatioWords[,c(4,5)], "Numărul de termeni \ncu aceeași rație de cuvinte per termen", "Numărul de termeni", leg = c("număr total de termeni", "număr de termeni \ncu aceeași rație \nde cuvinte per termen"), lim=600, set = c(-0.43, -0.1));
#gRatioRatioWT <- compareRatioWTgraph(dfRatioWords[,c(3,6)], "Raportul dintre numărul de concepte/termeni \ncu aceeași rație de cuvinte per concept/termen", "Valoarea raportului", leg = c("concepte", "termeni"), lim=1, set = c(-0.25, -0.1));
#sources <- list(c("fipat"), c("fipat"), c("autoRed"), c("autoOk"),c("reference"), c("referenceWordsLa"), c("gtLaRoTerms"), c("gtEnRoTerms"), c("gtLaRoWords"), c("gtEnRoWords"), c("junqueira","tm2009", "tm2004", "buc1987", "craiova2006"));
#langs <- list(c("la"), c("en"), c("ro"), c("ro"), c("ro"), c("ro"), c("ro"), c("ro"), c("ro"), c("ro"), c("ro","ro","ro","ro","ro"))
# compareAll10<-compareTime(final3, sources, langs, c(6,15,20), 5, 10, 10);
# compareAll20<-compareTime(final3, sources, langs, c(6,15,20), 5, 20, 10);
# compareAll30<-compareTime(final3, sources, langs, c(6,15,20), 5, 30, 10);
# compareAll40<-compareTime(final3, sources, langs, c(6,15,20), 5, 40, 10);
# compareAll50<-compareTime(final3, sources, langs, c(6,15,20), 5, 50, 10);
# names(compareAll10) <- c("la", "en", "autoRed", "autoOk", "reference", "referenceWordsLa", "gtLaRoTerms", "gtEnRoTerms", "gtLaRoWords", "gtEnRoWords", "allSources");
# names(compareAll20) <- c("la", "en", "autoRed", "autoOk", "reference", "referenceWordsLa", "gtLaRoTerms", "gtEnRoTerms", "gtLaRoWords", "gtEnRoWords", "allSources");
# names(compareAll30) <- c("la", "en", "autoRed", "autoOk", "reference", "referenceWordsLa", "gtLaRoTerms", "gtEnRoTerms", "gtLaRoWords", "gtEnRoWords", "allSources");
# names(compareAll40) <- c("la", "en", "autoRed", "autoOk", "reference", "referenceWordsLa", "gtLaRoTerms", "gtEnRoTerms", "gtLaRoWords", "gtEnRoWords", "allSources");
# compare10 <- plotdf(compareAll10, 10);
# compare20 <- plotdf(compareAll10, 20);
# compare30 <- plotdf(compareAll10, 30);
# compare40 <- plotdf(compareAll10, 40);
# compareFR <- rbind(compare10, compare20, compare30, compare40);
#
# g <- qplot(noRepet, elapsed, data = compareFR[compareFR$sources != "allSources",], color = sources, size = I(6), main = "Variația duratei de execuție a unei căutări de termeni \nîntr-un text, corespunzător surselor", xlab = "Numărul de repetiții al execuției funcției de căutare", ylab = "Durata de execuție", margins = TRUE);
# g+theme(axis.text=element_text(size=14), axis.title=element_text(size=14,face="bold"));
# gAll <- qplot(noRepet, elapsed, data = compareFR, color = sources, size = I(6), main = "Variația duratei de execuție a unei căutări de termeni \nîntr-un text, corespunzător surselor", xlab = "Numărul de repetiții al execuției funcției de căutare", ylab = "Durata de execuție", margins = TRUE);
# gAll+theme(axis.text=element_text(size=14), axis.title=element_text(size=14,face="bold"));
# g <- qplot(noRepet, elapsed, data = compareFR[compareFR$sources != "allSources",], color = sources, size = I(6), main = "", xlab = "Numărul de repetiții al execuției funcției de căutare", ylab = "Timpul de execuție (sec)", margins = TRUE);
# g+theme(axis.text=element_text(size=17), axis.title=element_text(size=17, family="serif"));
# gAll <- qplot(noRepet, elapsed, data = compareFR, color = sources, size = I(6), main = "", xlab = "Numărul de repetiții al execuției funcției de căutare", ylab = "Timpul de execuție (sec)", margins = TRUE);
# gAll+theme(axis.text=element_text(size=17), axis.title=element_text(size=17, family="serif"));
# sums <- comparedf(compareFR); #summary for each source
# sums <- sums[order(sums[,"mean"]),];
# write.csv(finalLaEn2, "../Data/finalLaEn.csv");
# writeLines(final[final$source == "reference", "term"], "../Data/referenceTerms.csv");
#write.csv(finalWords, "../Data/finalWords.csv");
#write.csv(final, "../Data/final.csv");
#length(LaRoRel[LaRoRel$matchWords != "", "matchWords"]) #722 from 990
#length(EnRoRel[EnRoRel$matchWords != "", "matchWords"]) #895 from 1056
#length(LaRoRelOk[LaRoRelOk$matchWords != "", "matchWords"]) #856 from 990
#length(which(LaRoRel[, "matchWords"] == LaRoRelOk[, "matchWords"])); #654
#length(which(LaRoRel[, "matchWords"] == "" & LaRoRelOk[, "matchWords"] == "")); #87 - "" -> 567 usable from 856
#length(as.character(finalWords[finalWords$source=="junqueira" & finalWords$lang == "ro","term"])); #1088
#uniqueWo <- makeUniqueWords(final,"ro");
#g <- horizNoTerms(final);
#write.csv(final, "../Data/final.csv");
#write.csv(finalLaEn2, "finalLaEn.csv")
#w <- getURL("https://raw.githubusercontent.com/loredanacirstea/thRoTrans/ee4583b9c5c490e1732375acc4124ba248c763f2/Data/500terms.csv");
#sample <- read.csv(text = w);
#sample00 <- matchid(sample500);
#demog <- graphdemo();
#newlang <- csvtodf(sample00, "ro", 3);
#dd <- newlang[1:25,];
#finalLa <- separateTerms(newlang);
#sample002 <- sample002[,2:15];
#finalLa2 <- csvtodf(sample002, "ro", 3);
#finalLa2clear <- cleardf(finalLa2);
#fin <- referenceTrans(finalLa2clear);
#g <- graphcompare(finalLa2clear);
#g <- graphcompare(finalLa2);
#comp(finalLa2, finalLa);
#newd <- getURL("https://raw.githubusercontent.com/loredanacirstea/thRoTrans/master/Data/500terms.csv");
#newdf <- read.csv(text = newd);
#cat("Done.");
#ontobrowse();
#wo<-wordFrame("la","en");
#wo<-transWords(wo, "la", "ro");
#wo<-transWord(wo, 47032, "la", "ro");
#finalLaEn <- tm[tm$term_id %in% sample500[,"id"] & tm$lang %in% c("la","en"), ]; !!nu e bun!!!
#final <- woToTermsBase(LaRoRelOk, final, "la", "ro", "referenceWordsLa"); - nu
# final[final$source == "gtLaRoTerms","lang"] <- rep("ro", length(final[final$source == "gtLaRoTerms","lang"])); -nush de ce a fost nevoie
#length(sample500[sample500$junqueira != "", "junqueira"]);
#gsub("(^[[:space:]]+|[[:space:]]+$)", "", unlist(strsplit(as.character(sample002[,"junqueira"]),
# c(";", " ;", " ; ", "; "), fixed = TRUE)))
ontobrowse()
ontobrowse()
